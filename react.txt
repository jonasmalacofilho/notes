React:
- a component is a js function taking props and returning jsx (!! name must start uppercase letter!)
- components should be pure functions; parametrize with props, add memory with state
- props are the *only* argument to the child component; props can be passed to it as attributes, or
  forwarded with the JSX spread syntax `{...props}`
- the ui isn't modified from code directly; instead it modifies state, and then the ui is indirectly
  updated
- define state with `useState`, but avoid redundant state variables (!! `useState` and other hooks
  must only be used at the component top level)
- don't mutate state directly; instead, treat it as immutable, and only set it to a new value using
  the `setX` closure returned from `useState` (but `setX` supports in-place updates with closures,
  in some situations; see also: https://react.dev/reference/react/useState)
- share state through the closest common parent, and then down through props
- by default, state is preserved where the component tree "matches up"; customize this with `key` on
  component use
- organize state updates with a state reducer (defined with `useReducer`)
- when passing state through props becomes inconvenient, use context through `useContext`
- can pass a reducer's state and dispatch through context
- `useRef` escape hatch: like state, but doesn't re-render
- effects allow code to run after rendering
- change detection: through the framework, through the function returned by `useState`
- mui: a library of based or pre-styled react ui components (mentioned by caio)
- tailwind css: a css framework that might play well with react
- full-stack frameworks support client-side-only use cases (next, gatsby)
    - next.js seems to be "normal" way to do it
    - gatsby is specifically for static websites, but also focuses too much on graphql, and i don't
      want to go there right now
    - the last suggested/recommended framework is remix, which seems to be very
      performance-oriented, but also doesn't appear to support a "static" use case
    - so i'll (probably) start with next
- see also: <https://blog.logrocket.com/real-time-chat-app-rust-react>
- Firefox: when working locally, permanently disable HTTP-Only mode for the site, lest the console
  be useless
- extend developer tools with react-devtools (Firefox, Chrome and Edge)
