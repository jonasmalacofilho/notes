Data races
==========

Principal references
--------------------

[C11]: http://www.open-std.org/jtc1/sc22/wg14/www/standards
[LKMM]: tools/memory-model/Documentation
[memory barriers]: Documentation/memory-barriers.txt


Data races are UB
-----------------

At the language level, C11 defines data races as:

> The execution of a program contains a data race if it contains two
> conflicting actions in different threads, at least one of which is not
> atomic, and neither happens before the other.

and

> Any such data race results in undefined behavior.

So, the program's behavior can be affected by both hardware reordering of
memory accesses any myriad of compiler optimizations.[1]

The Linux Kernel Memory Model ([LKMM]) expands this definition:

> In technical terms, the compiler is allowed to assume that when the
> program executes, there will not be any data races.  A "data race"
> occurs when there are two memory accesses such that:
>
> 1.	they access the same location,
>
> 2.	at least one of them is a store,
>
> 3.	at least one of them is plain,
>
> 4.	they occur on different CPUs (or in different threads on the
> 	same CPU), and
>
> 5.	they execute concurrently.

Item 3 is an important distinction; and item 5 determines whether two race
candidates actually do race.

(It seems that UB itself is not tabu in the kernel; it just places a burden on
the maintainers to make sure that such code works correctly on all compiler
versions and architectures).

[1]: https://lwn.net/Articles/793253/ ("Who's afraid of a big bad optimizing compiler?")


Simple memory-ordering lives
----------------------------
[LKMM]/simple.txt

- use single-threaded code; may need a global lock to ensure this;
- use library functions: /lib, much of include/linux/, etc;
- use data locking;
- use per-CPU processing;
- use sequence locking (include/linux/seqlock.h) with no writes in read-side
  code;
- use RCU with: no writes in read-side code, no updates to locations visible
  to/accessed by readers, protect updates with locking;
- use atomic operations: Documentation/atomic*, Documentation/core-api/*atomic*
- use atomic_set/atomic_get and then fully ordered operations
- for statistics and heuristics, be careful but use unordered atomic
  primitives and READ|WRITE_ONCE()

Not simple: plan C-language accesses for lockless loads and stores to shared
variables.


READ_ONCE/WRITE_ONCE
--------------------
include/asm-generic/rwonce.h

> Prevent the compiler from merging or refetching reads or writes. The compiler
> is also forbidden from reordering successive instances of READ_ONCE and
> WRITE_ONCE, but only when the compiler is aware of some particular ordering.
> One way to make the compiler aware of ordering is to put the two invocations
> of READ_ONCE or WRITE_ONCE in different C statements.
>
> These two macros will also work on aggregate data types like structs or
> unions.
>
> Their two major use cases are:
>
> (1) Mediating communication between process-level code and irq/NMI handlers,
> all running on the same CPU,

TODO Why "running on the same CPU"?

>, and (2) Ensuring that the compiler does not fold, spindle, or otherwise
>mutilate accesses that either do not require ordering or that interact with an
>explicit memory barrier or atomic instruction that provides the required
>ordering.

READ_ONCE() is usually more important that WRITE_ONCE():[1]

> [...] there are often _obvious_ reasons to use READ_ONCE().
>
> I really do not find the same to be true of WRITE_ONCE(). There are valid
> uses, but they are definitely much less common, and much less obvious.

In practice, READ_ONCE() and WRITE_ONCE() do the respective reads and writes in
a temporarily volatile manner.

Note: do not use volatile on the data.[2][3]

Note: before there was: ACCESS_ONCE, READ_ONCE and ASSIGN_ONCE.

[1] https://lore.kernel.org/lkml/CAHk-=wiOhiAJVU71968tAND6rrEJSaYPg7DXK6Y6iiz7_RJACw@mail.gmail.com/
[2] Documentation/process/volatile-considered-harmful.rst
[3] https://lwn.net/Articles/233482/


Barriers
--------
[LKMM]/ordering.txt
[memory barriers]

- add comments when using memory-ordering primitives
- full memory barrier:
    - smb_mb()
    - RMW atomic ops that return values and do not end in _acquire, _release or
      _relaxed
    - [ ... ]
- RMW ordering augmentation memory barrier:
    - for efficiency of more strongly ordered architectures, after
      non-value-returning RMW atomic ops
    - smp_mb__before_atomic()
    - smp_mb__after_atomic()
    - smp_mb__after_spinlock()
    - smp_mb__after_srcu_read_unlock()
- write memory barrier:
    - smp_wmb()
    - orders stores before and after the barrier (is stronger than a release
      barrier)
    - watch out for store-to-load transformations when using plain stores
- read memory barrier:
    - smp_rmb()
    - order reads before and after the barrier (is stronger than a acquire
      barrier)
    - "you are usually better using an acquire load"
- compiler barrier:
    - barrier()
- all memory barriers imply compiler barriers, even if SMP is disabled
- SMP memory barriers are reduced to compiler barriers on non-SMP systems
  "because it is assumed that a CPU will appear to be self-consistent, and will
  order overlapping accesses correctly with respect to itself."
- SMP memory barriers do not control MMIO effects
- mandatory memory barriers (mb, wmb, rmb) should not be used to control SMP
  effects; they may be used to control MMIO effects
- there are virt_ memory barriers for when virtualized guests may need to
  synchronize with SMP hosts
- [ ... ]

TODO non smp_ memory barriers
TODO complete


Control dependencies
--------------------
[LKMM]/explanation.txt (DEPENDENCY RELATIONS)
[LKMM]/control-dependencies.txt

A read event and another memory access event are linked by a control dependency
if the value obtained by the read affects whether the second event is executed
at all.

However, control dependencies order only later stores.  Some types of CPUs are
permitted to predict the result of the second load in a load-load control
dependency.  Thus, load-load control dependencies will not preserve ordering
unless a read memory barrier is provided.


TODO
----

- take notes on Intel 64/IA-32 relatively strong implied ordering
- take notes on Intel 64/IA-32 atomicity of loads/stores
- take notes on typical sizes of scalar types
- check usage of jiffies
- check seqlocks
